generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String    @id @default(cuid())
  email     String    @unique
  username  String    @unique
  password  String
  firstName String?
  lastName  String?
  role      UserRole  @default(AUTHOR)
  bio       String?
  avatar    String?
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  articles  Article[]
  comments  Comment[]
  likes     Like[]

  @@map("users")
}

model Article {
  id            String        @id @default(cuid())
  title         String
  slug          String        @unique
  content       String
  excerpt       String?
  featuredImage String?
  status        ArticleStatus @default(DRAFT)
  publishedAt   DateTime?
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
  authorId      String
  tags          ArticleTag[]
  author        User          @relation(fields: [authorId], references: [id], onDelete: Cascade)
  comments      Comment[]
  likes         Like[]

  @@map("articles")
}

model Comment {
  id        String    @id @default(cuid())
  content   String
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  articleId String
  userId    String
  parentId  String?
  article   Article   @relation(fields: [articleId], references: [id], onDelete: Cascade)
  parent    Comment?  @relation("CommentReplies", fields: [parentId], references: [id])
  replies   Comment[] @relation("CommentReplies")
  user      User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("comments")
}

model Like {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  articleId String
  userId    String
  article   Article  @relation(fields: [articleId], references: [id], onDelete: Cascade)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([articleId, userId])
  @@map("likes")
}

model Tag {
  id       String       @id @default(cuid())
  name     String       @unique
  slug     String       @unique
  articles ArticleTag[]

  @@map("tags")
}

model ArticleTag {
  articleId String
  tagId     String
  article   Article @relation(fields: [articleId], references: [id], onDelete: Cascade)
  tag       Tag     @relation(fields: [tagId], references: [id], onDelete: Cascade)

  @@id([articleId, tagId])
  @@map("article_tags")
}

enum UserRole {
  AUTHOR
  ADMIN
}

enum ArticleStatus {
  DRAFT
  SUBMITTED
  PUBLISHED
}
